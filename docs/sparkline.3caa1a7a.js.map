{"version":3,"sources":["node_modules/admin-lte/plugins/sparklines/sparkline.js"],"names":["root","factory","define","amd","exports","module","Sparkline","window","element","options","extend","specific","general","obj","key","innerHTML","canvas","firstChild","context","getContext","ratio","devicePixelRatio","tooltip","style","position","onmousemove","showTooltip","e","x","offsetX","layerX","delta","width","dotRadius","points","length","index","a","b","Math","round","c","max","min","minmax","title","bind","drawLine","x1","x2","y","save","strokeStyle","color","lineWidth","globalAlpha","alpha","beginPath","moveTo","direction","lineTo","stroke","restore","height","lineColor","startColor","endColor","maxColor","minColor","minValue","maxValue","minMaxValue","maxMinValue","fillBelow","fillLighten","startLine","endLine","minLine","maxLine","bottomLine","topLine","averageLine","init","draw","sparkline","prototype","pxHeight","offsetHeight","offsetY","apply","bottomValue","undefined","topValue","minX","maxX","getY","range","dot","drawDot","radius","line","fillStyle","arc","PI","fill","call","lineCap","lineJoin","i","indexOf"],"mappings":"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","file":"sparkline.3caa1a7a.js","sourceRoot":"..","sourcesContent":["(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define(factory);\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like enviroments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (root is window)\r\n    root.Sparkline = factory();\r\n  }\r\n}(window, function () {\r\n  function extend(specific, general) {\r\n    var obj = {};\r\n    for (var key in general) {\r\n      obj[key] = key in specific ? specific[key] : general[key];\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  function Sparkline(element, options) {\r\n    this.element = element;\r\n    this.options = extend(options || {}, Sparkline.options);\r\n\r\n    init: {\r\n      this.element.innerHTML = \"<canvas></canvas>\";\r\n      this.canvas = this.element.firstChild;\r\n      this.context = this.canvas.getContext(\"2d\");\r\n      this.ratio = window.devicePixelRatio || 1;\r\n\r\n      if (this.options.tooltip) {\r\n        this.canvas.style.position = \"relative\";\r\n        this.canvas.onmousemove = showTooltip.bind(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  Sparkline.options = {\r\n    width: 100,\r\n    height: null,\r\n    lineColor: \"black\",\r\n    lineWidth: 1.5,\r\n    startColor: \"transparent\",\r\n    endColor: \"black\",\r\n    maxColor: \"transparent\",\r\n    minColor: \"transparent\",\r\n    minValue: null,\r\n    maxValue: null,\r\n    minMaxValue: null,\r\n    maxMinValue: null,\r\n    dotRadius: 2.5,\r\n    tooltip: null,\r\n    fillBelow: true,\r\n    fillLighten: 0.5,\r\n    startLine: false,\r\n    endLine: false,\r\n    minLine: false,\r\n    maxLine: false,\r\n    bottomLine: false,\r\n    topLine: false,\r\n    averageLine: false\r\n  };\r\n\r\n  Sparkline.init = function (element, options) {\r\n    return new Sparkline(element, options);\r\n  };\r\n\r\n  Sparkline.draw = function (element, points, options) {\r\n    var sparkline = new Sparkline(element, options);\r\n    sparkline.draw(points);\r\n    return sparkline;\r\n  }\r\n\r\n  function getY(minValue, maxValue, offsetY, height, index) {\r\n    var range = maxValue - minValue;\r\n    if (range == 0) {\r\n      return offsetY + height / 2;\r\n    } else {\r\n      return (offsetY + height) - ((this[index] - minValue) / range) * height;\r\n    }\r\n  }\r\n\r\n  function drawDot(radius, x1, x2, color, line, x, y) {\r\n    this.context.beginPath();\r\n    this.context.fillStyle = color;\r\n    this.context.arc(x, y, radius, 0, Math.PI * 2, false);\r\n    this.context.fill();\r\n    drawLine.call(this, x1, x2, line, x, y);\r\n  }\r\n\r\n  function drawLine(x1, x2, style, x, y){\r\n    if(!style) return;\r\n\r\n    this.context.save();\r\n    this.context.strokeStyle = style.color || 'black';\r\n    this.context.lineWidth = (style.width || 1) * this.ratio;\r\n    this.context.globalAlpha = style.alpha || 1;\r\n    this.context.beginPath();\r\n    this.context.moveTo(style.direction != 'right' ? x1 : x, y);\r\n    this.context.lineTo(style.direction != 'left' ? x2 : x, y);\r\n    this.context.stroke();\r\n    this.context.restore();\r\n  }\r\n\r\n  function showTooltip(e) {\r\n    var x = e.offsetX || e.layerX || 0;\r\n    var delta = ((this.options.width - this.options.dotRadius * 2) / (this.points.length - 1));\r\n    var index = minmax(0, Math.round((x - this.options.dotRadius) / delta), this.points.length - 1);\r\n\r\n    this.canvas.title = this.options.tooltip(this.points[index], index, this.points);\r\n  }\r\n\r\n  Sparkline.prototype.draw = function (points) {\r\n\r\n    points = points || [];\r\n    this.points = points;\r\n\r\n    this.canvas.width = this.options.width * this.ratio;\r\n    this.canvas.style.width = this.options.width + 'px';\r\n\r\n    var pxHeight = this.options.height || this.element.offsetHeight;\r\n    this.canvas.height = pxHeight * this.ratio;\r\n    this.canvas.style.height = pxHeight + 'px';\r\n\r\n    var lineWidth = this.options.lineWidth * this.ratio;\r\n    var offsetX = Math.max(this.options.dotRadius * this.ratio, lineWidth/2);\r\n    var offsetY = Math.max(this.options.dotRadius * this.ratio, lineWidth/2);\r\n    var width = this.canvas.width - offsetX * 2;\r\n    var height = this.canvas.height - offsetY * 2;\r\n\r\n    var minValue = Math.min.apply(Math, points);\r\n    var maxValue = Math.max.apply(Math, points);\r\n    var bottomValue = this.options.minValue != undefined ? this.options.minValue : Math.min(minValue, this.options.maxMinValue != undefined ? this.options.maxMinValue : minValue);\r\n    var topValue = this.options.maxValue != undefined ? this.options.maxValue : Math.max(maxValue, this.options.minMaxValue != undefined ? this.options.minMaxValue : maxValue);\r\n    var minX = offsetX;\r\n    var maxX = offsetX;\r\n\r\n    var x = offsetX;\r\n    var y = getY.bind(points, bottomValue, topValue, offsetY, height);\r\n    var delta = width / (points.length - 1);\r\n\r\n    var dot = drawDot.bind(this, this.options.dotRadius * this.ratio, offsetX, width + offsetX);\r\n    var line = drawLine.bind(this, offsetX, width + offsetX);\r\n\r\n    this.context.save();\r\n\r\n    this.context.strokeStyle = this.options.lineColor;\r\n    this.context.fillStyle = this.options.lineColor;\r\n    this.context.lineWidth = lineWidth;\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n\r\n    if(this.options.fillBelow && points.length > 1){\r\n      this.context.save();\r\n      this.context.beginPath();\r\n      this.context.moveTo(x, y(0));\r\n      for (var i = 1; i < points.length; i++) {\r\n        x += delta;\r\n\r\n        minX = points[i] == minValue ? x : minX;\r\n        maxX = points[i] == maxValue ? x : maxX;\r\n\r\n        this.context.lineTo(x, y(i));\r\n      }\r\n      this.context.lineTo(width+offsetX, height + offsetY + lineWidth/2);\r\n      this.context.lineTo(offsetX, height + offsetY + lineWidth/2);\r\n      this.context.fill();\r\n      if(this.options.fillLighten > 0){\r\n        this.context.fillStyle = 'white';\r\n        this.context.globalAlpha = this.options.fillLighten;\r\n        this.context.fill();\r\n        this.context.globalAlpha = 1;\r\n      }else if(this.options.fillLighten < 0){\r\n        this.context.fillStyle = 'black';\r\n        this.context.globalAlpha = -this.options.fillLighten;\r\n        this.context.fill();\r\n      }\r\n      this.context.restore();\r\n    }\r\n\r\n    x = offsetX;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x, y(0));\r\n    for (var i = 1; i < points.length; i++) {\r\n      x += delta;\r\n      this.context.lineTo(x, y(i));\r\n    }\r\n    this.context.stroke();\r\n\r\n    this.context.restore();\r\n\r\n    line(this.options.bottomLine, 0, offsetY);\r\n    line(this.options.topLine, 0, height + offsetY+lineWidth/2);\r\n\r\n    dot(this.options.startColor, this.options.startLine, offsetX + (points.length == 1 ? width / 2 : 0), y(0));\r\n    dot(this.options.endColor, this.options.endLine, offsetX + (points.length == 1 ? width / 2 : width), y(points.length-1));\r\n    dot(this.options.minColor, this.options.minLine, minX + (points.length == 1 ? width / 2 : 0), y(points.indexOf(minValue)));\r\n    dot(this.options.maxColor, this.options.maxLine, maxX + (points.length == 1 ? width / 2 : 0), y(points.indexOf(maxValue)));\r\n\r\n    //line(this.options.averageLine, )\r\n  }\r\n\r\n  function minmax(a, b, c) {\r\n    return Math.max(a, Math.min(b, c));\r\n  }\r\n\r\n  return Sparkline;\r\n}));\r\n"]}